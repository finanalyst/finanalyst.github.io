#!/usr/bin/env raku
use experimental :rakuast;
my RakuDoc::To::HTML-Extra $rdp;
multi sub MAIN(:$docs = 'sources') {
    my %docs = $docs.IO.dir(test => *.ends-with('.rakudoc')).map({ .extension('').basename => .modified });
    my %rendered = dir(test => *.ends-with('.html')).map({ .extension('').basename => .modified });
    my @to-be-rendered = %docs.pairs.grep({
        %rendered{.key}:exists.not ||(%rendered{.key} < .value)
    })>>.key;
    exit note "No sources found in ｢$docs｣" unless +@to-be-rendered;
    $rdp .= new;
    render-files(@to-be-rendered, $docs)
}
multi sub MAIN(Str:D $file, :$to) {
    exit note "｢$file.rakudoc｣ does not exist" unless "$file.rakudoc".IO ~~ :e & :f;
    render-files([$file,], '.', :$to)
}
sub render-files (@to-be-rendered, $dir, :$to) {
    my %file-data;
    for @to-be-rendered.sort {
        my $dest = $_;
        $dest = $_ with $to;
        #topic of with not for
        my $fn = "$dir/$_".IO;
        my $ast = $fn.slurp.AST;
        my $processed = $rdp.render($ast, :source-data(%(
            name => $_,
            modified => $fn.modified,
            path => $fn.dirname,
        )), :pre-finalised);
        "$dest.html".IO.spurt($rdp.finalise);
        %file-data{$_} =
            title => $processed.title,
            subtitle => $processed.subtitle // 'No description',
        ;
    }
    create-index(%file-data);
}
sub create-index( %file-data ) {
    my $table = q:to/HEAD/;
        =begin table :!toc
        =row :header
        =cell Title
        =cell Description
        =cell Link
        HEAD

    for %file-data.kv -> $fn, %data {
        $table ~= qq:to/ROW/;
            =row
            =cell { %data<title> }
            =cell { %data<subtitle> }
            =cell L<$fn|{ $fn }.html>
            ROW
    }
    my $ast = ('index.start'.IO.slurp ~
        $table ~
        q:to/END/ ~ 'index.end'.IO.slurp ).AST;
        =end table
        =end rakudoc
        END
    'index.html'.IO.spurt: $rdp.render($ast, :source-data(%(
        name => 'index',
        modified => now,
        path => 'generated',
    )));
}